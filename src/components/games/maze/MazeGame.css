import React, { useState, useEffect, useCallback } from 'react';
import './MazeGame.css';

// Definicja labiryntów jako tablice 2D
const MAZES = [
    // Labirynt 1
    [
        [1,1,1,1,1,1,1,1,1,1],
        [1,0,0,0,1,0,0,0,0,1],
        [1,0,1,0,1,0,1,1,0,1],
        [1,0,1,0,0,0,0,1,0,1],
        [1,0,1,1,1,1,0,1,0,1],
        [1,0,0,0,0,1,0,0,0,1],
        [1,1,1,1,0,1,1,1,0,1],
        [1,0,0,1,0,0,0,1,0,1],
        [1,0,0,0,0,1,0,0,0,1],
        [1,1,1,1,1,1,1,1,1,1],
    ],
    // Labirynt 2
    [
        [1,1,1,1,1,1,1,1,1,1],
        [1,0,0,0,1,0,0,0,0,1],
        [1,0,1,0,1,0,1,1,0,1],
        [1,0,1,0,0,0,0,1,0,1],
        [1,0,1,1,1,1,0,1,0,1],
        [1,0,0,0,0,1,0,0,0,1],
        [1,1,1,1,0,1,1,1,0,1],
        [1,0,0,1,0,0,0,1,0,1],
        [1,0,0,0,0,1,0,0,0,1],
        [1,1,1,1,1,1,1,1,1,1],
    ],
    // Labirynt 3
    [
        [1,1,1,1,1,1,1,1,1,1],
        [1,0,0,0,1,0,0,0,0,1],
        [1,0,1,0,1,0,1,1,0,1],
        [1,0,1,0,0,0,0,1,0,1],
        [1,0,1,1,1,1,0,1,0,1],
        [1,0,0,0,0,1,0,0,0,1],
        [1,1,1,1,0,1,1,1,0,1],
        [1,0,0,1,0,0,0,1,0,1],
        [1,0,0,0,0,1,0,0,0,1],
        [1,1,1,1,1,1,1,1,1,1],
    ]
];

const MazeGame = () => {
    const [currentRound, setCurrentRound] = useState(1);
    const [currentMaze, setCurrentMaze] = useState([]);
    const [playerPosition, setPlayerPosition] = useState({ x: 1, y: 1 });
    const [gameStatus, setGameStatus] = useState('playing'); // 'playing', 'won'

    // Inicjalizacja labiryntu na początku i przy zmianie rundy
    useEffect(() => {
        const maze = MAZES[currentRound - 1];
        setCurrentMaze(maze);
        setPlayerPosition({ x: 1, y: 1 }); // Zakładamy, że start to (1,1)
    }, [currentRound]);

    // Obsługa naciśnięć klawiszy
    const handleKeyDown = useCallback((event) => {
        if (gameStatus !== 'playing') return;

        const { key } = event;
        let { x, y } = playerPosition;

        if (key === 'ArrowUp') {
            y -= 1;
        } else if (key === 'ArrowDown') {
            y += 1;
        } else if (key === 'ArrowLeft') {
            x -= 1;
        } else if (key === 'ArrowRight') {
            x += 1;
        } else {
            return; // Ignoruj inne klawisze
        }

        // Sprawdzenie granic i przeszkód
        if (
            y >= 0 &&
            y < GRID_SIZE &&
            x >= 0 &&
            x < GRID_SIZE &&
            currentMaze[y][x] !== 1
        ) {
            setPlayerPosition({ x, y });

            // Sprawdzenie, czy gracz dotarł do końca (zakładamy, że końcowy punkt to (8,8))
            if (currentRound === 3 && x === 8 && y === 8) {
                setGameStatus('won');
            } else if (x === 8 && y === 8) {
                // Przejdź do następnej rundy
                if (currentRound < 3) {
                    setCurrentRound(currentRound + 1);
                } else {
                    setGameStatus('won');
                }
            }
        }
    }, [playerPosition, currentMaze, currentRound, gameStatus]);

    // Dodanie i usunięcie nasłuchiwacza klawiszy
    useEffect(() => {
        window.addEventListener('keydown', handleKeyDown);

        return () => {
            window.removeEventListener('keydown', handleKeyDown);
        };
    }, [handleKeyDown]);

    // Restart gry
    const restartGame = () => {
        setCurrentRound(1);
        setGameStatus('playing');
        setPlayerPosition({ x: 1, y: 1 });
    };

    // Renderowanie komórek siatki
    const renderGrid = () => {
        return currentMaze.map((row, rowIndex) => (
            <tr key={rowIndex}>
                {row.map((cell, cellIndex) => {
                    let className = 'cell';

                    if (cell === 1) {
                        className += ' wall';
                    } else {
                        className += ' path';
                    }

                    if (playerPosition.x === cellIndex && playerPosition.y === rowIndex) {
                        className += ' player';
                    }

                    // Zakładamy, że koniec to (8,8) w każdym labiryncie
                    if (cellIndex === 8 && rowIndex === 8) {
                        className += ' end';
                    }

                    return <td key={cellIndex} className={className}></td>;
                })}
            </tr>
        ));
    };

    return (
        <div className="maze-container">
            <h1>Maze Game: Świąteczne Wyzwanie</h1>
            <h2>Runda: {currentRound} z 3</h2>
            <div className="maze">
                <table>
                    <tbody>
                    {renderGrid()}
                    </tbody>
                </table>
            </div>
            {gameStatus === 'won' && (
                <div className="win-message">
                    <h2>Gratulacje! Ukończyłeś wszystkie labirynty!</h2>
                    <button onClick={restartGame} className="restart-button">
                        Zagraj ponownie
                    </button>
                </div>
            )}
        </div>
    );
};

export default MazeGame;
